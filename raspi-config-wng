#!/bin/sh
# Taken from https://github.com/RPi-Distro/raspi-config
#
# See LICENSE file for copyright and license details

INTERACTIVE=True
ASK_TO_REBOOT=0
CONFIG=/boot/config.txt

export NEWT_COLORS='
root=,brightcyan
'

BACKTITLE="WiNoGATE (C) 2019 University of Applied Sciences Zwickau"

BTN_BACK=ZurÃ¼ck

# --------------------------------------------------------------------------------
is_pi () {
  ARCH=$(dpkg --print-architecture)
  if [ "$ARCH" = "armhf" ] ; then
    return 0
  else
    return 1
  fi
}

if is_pi ; then
  CMDLINE=/boot/cmdline.txt
else
  CMDLINE=/proc/cmdline
fi

# --------------------------------------------------------------------------------
is_pione() {
   if grep -q "^Revision\s*:\s*00[0-9a-fA-F][0-9a-fA-F]$" /proc/cpuinfo; then
      return 0
   elif grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]0[0-36][0-9a-fA-F]$" /proc/cpuinfo ; then
      return 0
   else
      return 1
   fi
}

# --------------------------------------------------------------------------------
is_pitwo() {
   grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]04[0-9a-fA-F]$" /proc/cpuinfo
   return $?
}

# --------------------------------------------------------------------------------
is_pizero() {
   grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]0[9cC][0-9a-fA-F]$" /proc/cpuinfo
   return $?
}

# --------------------------------------------------------------------------------
is_pifour() {
   grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]11[0-9a-fA-F]$" /proc/cpuinfo
   return $?
}

# --------------------------------------------------------------------------------
get_pi_type() {
   if is_pione; then
      echo 1
   elif is_pitwo; then
      echo 2
   else
      echo 0
   fi
}

# --------------------------------------------------------------------------------
is_live() {
    grep -q "boot=live" $CMDLINE
    return $?
}

# --------------------------------------------------------------------------------
is_ssh() {
  if pstree -p | egrep --quiet --extended-regexp ".*sshd.*\($$\)"; then
    return 0
  else
    return 1
  fi
}

# --------------------------------------------------------------------------------
is_fkms() {
  if grep -q okay /proc/device-tree/soc/v3d@7ec00000/status 2> /dev/null || grep -q okay /proc/device-tree/soc/firmwarekms@7e600000/status 2> /dev/null ; then
    return 0
  else
    return 1
  fi
}

# --------------------------------------------------------------------------------
deb_ver () {
  ver=`cat /etc/debian_version | cut -d . -f 1`
  echo $ver
}

# --------------------------------------------------------------------------------
calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

# --------------------------------------------------------------------------------
do_about() {
  whiptail --msgbox "\
This tool provides a straight-forward way of doing initial configuration of the Raspberry Pi for use as WiNoGATE Gateway at the WindNODE Research Project (www.windnode.de).

Although it can be run at any time, some of the options may have difficulties if you have heavily customised your installation.\
" 20 70 1
}


# --------------------------------------------------------------------------------
#
# --------------------------------------------------------------------------------
do_winogate_install_test1() {
  whiptail --title "Software-Installation" --checklist --separate-output "Choose:" 20 78 15 \
    "ovpn" "OpenVPN Client" ON \
    "ufw" "Firewall" ON \
    "mc" "Midnight Commander" OFF \
    "lnav" "LNAV" OFF \
    "symcon" "IP-Symcon 5.1" off 2>results

  while read choice
  do
	  case $choice in
                ovpn) echo "Installing OpenVPN..."
                ;;
                mc) echo "Installing MC..."
		;;
                #lnav) echo "Installing lnav..."
                lnav) apt-get install -y lnav                ;;
                symcon) echo "Installing IP-Symcon..."
                ;;
                *)
                ;;
  esac
  done < results
}

# --------------------------------------------------------------------------------
#
# --------------------------------------------------------------------------------
do_winogate_install_test2() {

  SEL=$(whiptail --title "Check list example" --checklist \
   "Choose user's permissions" 20 78 4 \
   "nopasswd" "Erlaube SSH nur mit Zertifikat, kein Passwort" ON \
   "sudoer" "Benutzer 'windnode' in Sudoers aufnehmen" OFF \
   "..." "..." OFF 3>&1 1>&2 2>&3)
  exitstatus=$?

  if [ $exitstatus = 0 ];
  then echo "Selected: $SEL"
  else echo "Cancelled."
  fi
}

# --------------------------------------------------------------------------------
#
# --------------------------------------------------------------------------------
do_winogate_test2() {
  WNGID="$1"
  while [ -z "$WNGID" ] && [ "$INTERACTIVE" = True ]; do
    WNGID=$(whiptail --inputbox "Please enter WNGID" 20 60 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    elif [ -z "$WNGID" ]; then
      whiptail --msgbox "WNGID cannot be empty. Please try again." 20 60
    fi
  done
  whiptail --msgbox "WNGID you entered: $WNGID" 20 60 1
}

# --------------------------------------------------------------------------------
# Create user 'windnode' and set authorized_keys
# --------------------------------------------------------------------------------
do_create_wng_user() {
  RES=$(sudo useradd -d /home/windnode -s /bin/bash -m windnode)
  return 0
}

# --------------------------------------------------------------------------------
# Install Prerequisites/Tools for Development: ufw
# --------------------------------------------------------------------------------
do_install_wng_dev() {
  sudo apt-get update && sudo apt-get dist-upgrade $$ sudo apt-get install lnav
}

# --------------------------------------------------------------------------------
# Install Prerequisited for Production: ufw
# --------------------------------------------------------------------------------
do_install_wng_prod() {
  sudo apt-get update && sudo apt-get dist-upgrade $$ sudo apt-get install ufw
}

# --------------------------------------------------------------------------------
do_change_timezone() {
  if [ "$INTERACTIVE" = True ]; then
    dpkg-reconfigure tzdata
  else
    local TIMEZONE="$1"
    if [ ! -f "/usr/share/zoneinfo/$TIMEZONE" ]; then
      return 1;
    fi
    rm /etc/localtime
    echo "$TIMEZONE" > /etc/timezone
    dpkg-reconfigure -f noninteractive tzdata
  fi
}

# --------------------------------------------------------------------------------
get_wifi_country() {
  CODE=${1:-0}
  IFACE="$(list_wlan_interfaces | head -n 1)"
  if [ -z "$IFACE" ]; then
    if [ "$INTERACTIVE" = True ]; then
      whiptail --msgbox "No wireless interface found" 20 60
    fi
    return 1
  fi
  if ! wpa_cli -i "$IFACE" status > /dev/null 2>&1; then
    if [ "$INTERACTIVE" = True ]; then
      whiptail --msgbox "Could not communicate with wpa_supplicant" 20 60
    fi
    return 1
  fi
  wpa_cli -i "$IFACE" save_config > /dev/null 2>&1
  COUNTRY="$(wpa_cli -i "$IFACE" get country)"
  if [ "$COUNTRY" = "FAIL" ]; then
    return 1
  fi
  if [ $CODE = 0 ]; then
    echo "$COUNTRY"
  fi
  return 0
}

# --------------------------------------------------------------------------------
do_wifi_country() {
  IFACE="$(list_wlan_interfaces | head -n 1)"
  if [ -z "$IFACE" ]; then
    if [ "$INTERACTIVE" = True ]; then
      whiptail --msgbox "No wireless interface found" 20 60
    fi
    return 1
  fi

  if ! wpa_cli -i "$IFACE" status > /dev/null 2>&1; then
    if [ "$INTERACTIVE" = True ]; then
      whiptail --msgbox "Could not communicate with wpa_supplicant" 20 60
    fi
    return 1
  fi

  oIFS="$IFS"
  if [ "$INTERACTIVE" = True ]; then
    IFS="/"
    value=$(cat /usr/share/zoneinfo/iso3166.tab | tail -n +26 | tr '\t' '/' | tr '\n' '/')
    COUNTRY=$(whiptail --menu "Select the country in which the Pi is to be used" 20 60 10 ${value} 3>&1 1>&2 2>&3)
    IFS=$oIFS
  else
    COUNTRY=$1
    true
  fi
  if [ $? -eq 0 ];then
    wpa_cli -i "$IFACE" set country "$COUNTRY"
    wpa_cli -i "$IFACE" save_config > /dev/null 2>&1
    if ! iw reg set "$COUNTRY" 2> /dev/null; then
        ASK_TO_REBOOT=1
    fi
    if hash rfkill 2> /dev/null; then
        rfkill unblock wifi
    fi
    if [ "$INTERACTIVE" = True ]; then
        whiptail --msgbox "Wi-fi country set to $COUNTRY" 20 60 1
    fi
  fi
}

# --------------------------------------------------------------------------------
do_hostname() {
  if [ "$INTERACTIVE" = True ]; then
    whiptail --msgbox "\
Please note: RFCs mandate that a hostname's labels \
may contain only the ASCII letters 'a' through 'z' (case-insensitive), 
the digits '0' through '9', and the hyphen.
Hostname labels cannot begin or end with a hyphen. 
No other symbols, punctuation characters, or blank spaces are permitted.\
" 20 70 1
  fi
  CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
  if [ "$INTERACTIVE" = True ]; then
    NEW_HOSTNAME=$(whiptail --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
  else
    NEW_HOSTNAME=$1
    true
  fi
  if [ $? -eq 0 ]; then
    echo $NEW_HOSTNAME > /etc/hostname
    sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
    ASK_TO_REBOOT=1
  fi
}



# --------------------------------------------------------------------------------
get_ssh() {
  if service ssh status | grep -q inactive; then
    echo 1
  else
    echo 0
  fi
}

# --------------------------------------------------------------------------------
do_ssh() {
  if [ -e /var/log/regen_ssh_keys.log ] && ! grep -q "^finished" /var/log/regen_ssh_keys.log; then
    whiptail --msgbox "Initial ssh key generation still running. Please wait and try again." 20 60 2
    return 1
  fi
  DEFAULT=--defaultno
  if [ $(get_ssh) -eq 0 ]; then
    DEFAULT=
  fi
  if [ "$INTERACTIVE" = True ]; then
    whiptail --yesno "Would you like the SSH server to be enabled?" $DEFAULT 20 60 2
    RET=$?
  else
    RET=$1
  fi
  if [ $RET -eq 0 ]; then
    ssh-keygen -A &&
    update-rc.d ssh enable &&
    invoke-rc.d ssh start &&
    STATUS=enabled
  elif [ $RET -eq 1 ]; then
    update-rc.d ssh disable &&
    invoke-rc.d ssh stop &&
    STATUS=disabled
  else
    return $RET
  fi
  if [ "$INTERACTIVE" = True ]; then
    whiptail --msgbox "The SSH server is $STATUS" 20 60 1
  fi
}


# --------------------------------------------------------------------------------
do_update() {
  #apt-get update &&
  #apt-get install raspi-config &&
  #printf "Sleeping 5 seconds before reloading raspi-config\n" &&
  #sleep 5 &&
  #exec raspi-config
  sleep 1
}



# --------------------------------------------------------------------------------
list_wlan_interfaces() {
  for dir in /sys/class/net/*/wireless; do
    if [ -d "$dir" ]; then
      basename "$(dirname "$dir")"
    fi
  done
}


# --------------------------------------------------------------------------------
do_finish() {
  exit
}

# --------------------------------------------------------------------------------
# ################################################################################
# --------------------------------------------------------------------------------
do_winogate_menu() {
  FUN=$(whiptail --title "Raspberry Pi Configuration Tool (raspi-config)" --menu "Interfacing Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button $BTN_BACK --ok-button Select \
    "P1 Benutzer" "Benutzer 'windnode' anlegen und konfigurieren" \
    "P2 Tools" "Hilfsprogramme und Werkzeuge installieren" \
    "P1 Apps" "Anwendungen installieren" \
    "P1 Konfiguration" "System konfigurieren" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      P1\ *) do_create_wng_user ;;
      P1\ *) do_install_tools ;;
      P1\ *) do_install_apps ;;
      P1\ *) do_config ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

# --------------------------------------------------------------------------------
do_tools_menu() {
  FUN=$(whiptail --title "Raspberry Pi Configuration Tool (raspi-config)" --menu "Interfacing Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button $BTN_BACK --ok-button Select \
    "P1 SSH" "Enable/Disable remote command line access to your Pi using SSH" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      P1\ *) do_ssh ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}


# --------------------------------------------------------------------------------
#
# Interactive use loop
#
if [ "$INTERACTIVE" = True ]; then
  [ -e $CONFIG ] || touch $CONFIG
  calc_wt_size
  while true; do
    if is_pi ; then
      #FUN=$(whiptail --title "Raspberry Pi Configuration Tool for WiNoGATE (raspi-config-wng)" --backtitle "$(cat /proc/device-tree/model)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Ende --ok-button Auswahl \
      FUN=$(whiptail --title "Software Configuration Tool for WiNoGATE (raspi-config-wng)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Ende --ok-button Auswahl \
        "1 Setup WiNoGATE" "WiNoGATE Basisinstallation" \
        "2 Tools" "Hilfsprogramme" \
        "8 Update" "Dieses Tool auf neueste Version bringen" \
        "9 About raspi-config" "Information Ã¼ber dieses Konfigurationswerkzeug" \
        3>&1 1>&2 2>&3)
    else
      FUN=$(whiptail --title "Raspberry Pi Configuration Tool for WiNoGATE (raspi-config-wng)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
        "1 Setup WiNoGATE" "WiNoGATE Basisinstallation" \
        "2 Tools" "Hilfsprogramme" \
        "8 Update" "Dieses Tool auf neueste Version bringen" \
        "9 About raspi-config" "Information Ã¼ber dieses Konfigurationswerkzeug" \
        3>&1 1>&2 2>&3)
    fi
    RET=$?
    if [ $RET -eq 1 ]; then
      do_finish
    elif [ $RET -eq 0 ]; then
      if is_pi ; then
        case "$FUN" in
	  1\ *) do_winogate_menu ;;
	  2\ *) do_tools_menu ;;
          8\ *) do_update ;;
          9\ *) do_about ;;
          *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
      else
        case "$FUN" in
	  1\ *) do_winogate_menu ;;
	  2\ *) do_tools_menu ;;
          8\ *) do_update ;;
          9\ *) do_about ;;
          *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
      fi
    else
      exit 1
    fi
  done
fi
